<?php

/**
 * @file
 * Primary hook implementations for EXIF Custom.
 */

/**
 * Implements hook_menu().
 */
function exif_custom_menu() {
  $items['admin/config/content/exif_custom'] = array(
    'title' => 'Custom Exif Mappings',
    'page callback' => 'exif_custom_mappings',
    'access arguments' => array(
      'view image metadata',
    ),
    'description' => t('Customise mappings of EXIF data'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/exif_custom/maps'] = array(
    'title' => 'Custom Exif Mappings',
    'page callback' => 'exif_custom_mappings',
    'access arguments' => array(
      'view image metadata',
    ),
    'description' => t('Customise mappings of EXIF data'),
    'access callback' => 'user_access',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/content/exif_custom/new_map'] = array(
    'title' => 'New Exif Mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'exif_custom_new_map_form',
    ),
    'access arguments' => array(
      'administer image metadata',
    ),
    'description' => 'Customise mappings of EXIF data',
    'access callback' => 'user_access',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/content/exif_custom/map/%'] = array(
    'title' => 'Edit mapping',
    // TODO: title callback?
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'exif_custom_map_edit_form',
    ),
    'access arguments' => array(
      'administer image metadata',
    ),
    'description' => 'Customise mappings of EXIF data',
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/exif_custom/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'exif_custom_settings_form',
    ),
    'access arguments' => array(
      'administer image metadata',
    ),
    'description' => 'Customise general settings for EXIF import',
    'access callback' => 'user_access',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/content/exif_custom/user'] = array(
    'title' => 'User Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'exif_custom_settings_form_user',
    ),
    'access arguments' => array(
      'have default image metadata profile',
    ),
    'description' => 'Customise general settings for EXIF import',
    'access callback' => 'user_access',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function exif_custom_permission() {
  return array(
    'have default image metadata profile' => array(
      'title' => t('Have default image metadata profile'),
      'description' => t('Allow users to override teh site default image metadata profile.'),
    ),
    'view image metadata' => array(
      'title' => t('View image metadata'),
      'description' => t('See what image metdata import profiles have been created.'),
    ),
    'administer image metadata' => array(
      'title' => 'Administer image metadata',
      'description' => t('Administer image metadata import profiles'),
    ),
  );
}

/**
 * General settings page for the exif_custom module.
 */
function exif_custom_settings_form() {
  $options = array(
    'auto-import' => 'Automatically save metadata using the default mapping',
  );
  $form['auto-import-options'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Automatic import',
    '#options' => $options,
    '#description' => t('Each user may set their own default mapping, in addition a site default may be set.'),
    '#default_value' => variable_get('exif_custom_checks', array()),
  );
  $form['exif_custom_request_method'] = array(
    '#type' => 'radios',
    '#title' => t('Image request method'),
    '#options' => array(
      'legacy' => t('Use drupal_realpath() - works with HTTP Authentication, self-signed certificates, etc.'),
      'new' => t('Use file_create_url() - works with CDNs and other remote file storage systems.'),
    ),
    '#default_value' => variable_get('exif_custom_request_method', 'legacy'),
  );
  $mappings = _exif_custom_get_maps();
  $options = array();
  $options['none'] = t('- No default selected -');
  if (!empty($mappings)) {
    while ($result = $mappings->fetchObject()) {
      $options[$result->mid] = $result->name;
    }
    $form['site-default'] = array(
      '#type' => 'select',
      '#title' => 'Site default mapping',
      '#default_value' => variable_get('exif_custom_default', ''),
      '#options' => $options,
      '#description' => 'Individual users may override the site default.',
    );

    $form['exclude-paths'] = array(
      '#type' => 'textarea',
      '#title' => t('Exclude paths'),
      '#default_value' => variable_get('exif_custom_exclude_paths', ''),
      '#description' => t('Newline separated list of file-paths that should be skipped, must be prefixed with public:// or temporary:// or private://. The directory-part of the path should have a trailing / unless you want to match a partial directory-name. You will most likely want to end the pattern with an asterisk.<br>Eg. public://some_directory/image* will match files in "some_directory" starting with "image" while public://some_directory/* will match any files in "some_directory"'),
    );
  }
  else {
    drupal_set_message(t('You have not yet created any mappings.'));
  }
  $form['#submit'][] = 'exif_custom_settings_form_submit';
  return system_settings_form($form);
}

/**
 * User settings form.
 */
function exif_custom_settings_form_user() {
  $mappings = _exif_custom_get_maps();
  $options = array();
  $options['none'] = '';
  if (!empty($mappings)) {
    while ($result = $mappings->fetchObject()) {
      $options[$result->mid] = $result->name;
    }
  }
  else {
    drupal_set_message(t('You have not yet created any mappings.'));
  }
  $form['user-default'] = array(
    '#type' => 'select',
    '#title' => 'Personal default mapping',
    '#default_value' => exif_custom_get_user_default(),
    '#options' => $options,
  );
  $form['#submit'][] = 'exif_custom_settings_form_user_submit';
  return $form;
}

/**
 *
 */
function exif_custom_settings_form_submit($form, $form_state) {
  variable_set('exif_custom_checks', $form_state['values']['auto-import-options']);
  variable_set('exif_custom_default', $form_state['values']['site-default']);
  variable_set('exif_custom_exclude_paths', ($form_state['values']['exclude-paths']));
}

/**
 * FormAPI submission callback for exif_custom_settings_form_user().
 */
function exif_custom_settings_form_user_submit($form, $form_state) {
  global $user;
  $mid = 0;
  if (isset($form_state['values']['user-default'])) {
    $mid = (int) $form_state['values']['user-default'];
  }
  db_merge('exif_custom_users')
    ->key(array(
      'uid' => $user->uid,
    ))
    ->fields(array(
      'mid' => $mid,
    ))
    ->execute();
}

/**
 * Load a user's custom settings ID.
 */
function exif_custom_get_user_default() {
  global $user;
  $mid = db_query('SELECT mid FROM {exif_custom_users} WHERE uid = :uid', array(
    ':uid' => $user->uid,
  ))->fetchField();
  if (!empty($mid)) {
    return $mid;
  }
  else {
    return '';
  }
}

/**
 * Form API callback to edit a mapping.
 */
function exif_custom_map_edit_form() {
  // Let's get the mid.
  $mid = arg(5);
  // Load mappings.
  $sql = 'SELECT * FROM {exif_custom_mapped_fields} WHERE mid = :mid';
  $results = db_query($sql, array(
    ':mid' => $mid,
  ));
  // Load fields possible to map to.
  $fields = field_info_instances('file', 'image');
  $select_fields = array();
  // Allow mapping to title field.
  $select_fields['filename'] = 'File name';
  // Allow no field to be selected.
  $select_fields['none'] = 'none';
  foreach ($fields as $field => $field_data) {
    $select_fields[$field] = $field_data['label'];
  }
  $form['mappings-table-start'] = array(
    '#markup' => '<table><thead><tr><td><strong>EXIF field</strong></td><td><strong>Example</strong></td><td><strong>Mapped to</strong></td></tr></thead>',
  );
  while ($result = $results->fetchObject()) {
    $form[$result->exif_field] = array(
      '#markup' => $result->exif_field,
      '#prefix' => '<tr><td>',
      '#suffix' => '</td>',
    );
    $form['example:' . $result->exif_field] = array(
      '#markup' => $result->exif_example,
      '#prefix' => '<td>',
      '#suffix' => '</td>',
    );
    $form['img_field:' . $result->exif_field] = array(
      '#type' => 'select',
      '#default_value' => $result->img_field,
      '#options' => $select_fields,
      '#prefix' => '<td>',
      '#suffix' => '</td></tr>',
    );
  }
  $form['mappings-table-end'] = array(
    '#markup' => '</table>',
  );
  $form['delete'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Delete',
    '#options' => array(
      'delete' => t('Delete this mapping'),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );
  $form['#validate'][] = 'exif_custom_map_edit_validate';
  $form['#submit'][] = 'exif_custom_map_edit_submit';
  return $form;
}

/**
 * Validation callback for exif_custom_map_edit_form().
 */
function exif_custom_map_edit_validate($form, &$form_state) {
  // @todo Check for duplicates.
}

/**
 * Submission callback for exif_custom_map_edit_form().
 */
function exif_custom_map_edit_submit($form, $form_state) {
  $mid = arg(5);
  $test = (string) $form_state['values']['delete']['delete'];
  if ($test == 'delete') {
    db_query('DELETE FROM {exif_custom_mapped_fields} WHERE mid = :mid', array(
      ':mid' => $mid,
    ));
    db_query('DELETE FROM {exif_custom_maps} WHERE mid = :mid', array(
      ':mid' => $mid,
    ));
    db_query('DELETE FROM {exif_custom_users} WHERE mid = :mid', array(
      ':mid' => $mid,
    ));
    drupal_goto('admin/config/content/exif_custom/maps');
    return;
  }

  foreach ($form_state['values'] as $field => $value) {
    if (substr($field, 0, 10) != 'img_field:') {
      break;
    }
    $field = substr($field, 10);
    db_query("UPDATE {exif_custom_mapped_fields}
      SET img_field = :img_field
      WHERE mid = :mid AND exif_field = :exif_field", array(
        ':img_field' => $value,
        ':mid' => $mid,
        ':exif_field' => $field,
      ));
  }
}

/**
 * Main mappings page.
 */
function exif_custom_mappings() {
  $output = '';
  $mappings = _exif_custom_get_maps();
  if ($mappings == FALSE) {
    $output .= '<p>No mappings have been created yet.</p>';
  }
  else {
    $site_default_mid = variable_get('exif_custom_default', -1);
    $output .= '<table>';
    while ($result = $mappings->fetchObject()) {
      if (exif_custom_get_user_default() == $result->mid) {
        $default = '<strong>User Default</strong>';
      }
      elseif ($site_default_mid == $result->mid) {
        $default = 'Site Default';
      }
      else {
        $default = '';
      }
      $output .= '<tr><td>' . $result->name . '</td>';
      $output .= '<td>' . l('edit', 'admin/config/content/exif_custom/map/' . $result->mid) . '</td>';
      $output .= '<td>' . $default . '</td></tr>';
    }
    $output .= '</table>';
  }
  return $output;
}

/**
 * Initial form for creating a new mapping using an example file.
 */
function exif_custom_new_map_form() {
  $form['name'] = array(
    '#title' => t('Mapping name'),
    '#type' => 'textfield',
    '#description' => t("The name for this mapping (e.g. Jeremy's camera)."),
    '#required' => TRUE,
  );
  $form['example_file'] = array(
    '#title' => t("Example file"),
    '#type' => 'file',
    '#description' => t('A file with the EXIF fields you would like to map. Required.'),
    '#required' => FALSE,
  );
  $form['submit'] = array(
    '#value' => 'Save',
    '#type' => 'submit',
  );
  return $form;
}

/**
 * Form validation callback for exif_custom_new_map_form().
 */
function exif_custom_new_map_form_validate($form, &$form_state) {
  // Check that the name is unique.
  $sql = 'SELECT name FROM {exif_custom_maps} WHERE name = :name';
  $result = db_query($sql, array(
    ':name' => $form_state['values']['name'],
  ))->rowCount();
  if ($result > 0) {
    form_set_error('name', t('The name must be unique'));
  }

  // Verify an example image was uploaded.
  if (!isset($_FILES, $_FILES['files'], $_FILES['files']['name'], $_FILES['files']['name']['example_file'])) {
    form_set_error('example_file', t('An example file must be provided.'));
  }

  // @todo Check image is an allowed type.
}

/**
 * Form submission callback for exif_custom_new_map_form().
 */
function exif_custom_new_map_form_submit($form, &$form_state) {
  // Handle file uploading.
  $validators = array(
    'file_validate_is_image' => array(
      '',
    ),
  );

  // Save file as temporary.
  $file = file_save_upload('example_file', $validators);
  $fields = exif_custom_get_exif_fields($file->uri);

  // Add the mapping to the database.
  db_query('INSERT INTO {exif_custom_maps}(name) VALUES (:name)', array(
      ':name' => $form_state['values']['name'],
    ));

  // Retrieve the mid.
  $mid = db_query('SELECT mid FROM {exif_custom_maps} WHERE name = :name', array(
      ':name' => $form_state['values']['name'],
    ))->fetchField();

  // Save each of the field mappings.
  foreach ($fields as $key => $value) {
    if (is_array($value)) {
      $value_for_db = implode("; ", $value);
    }
    else {
      $value_for_db = $value;
    }
    db_query("INSERT INTO {exif_custom_mapped_fields}
      (mid, exif_field, exif_example, img_field)
      VALUES (:mid, :exif_field, :exif_example, :img_field)", array(
        ':mid' => $mid,
        ':exif_field' => $key,
        ':exif_example' => $value_for_db,
        ':img_field' => 'none',
      ));
  }
  drupal_set_message('New EXIF mapping has been saved: ' . $form_state['values']['name'], 'status');

  // Redirect to the edit page.
  $form_state['redirect'] = 'admin/config/content/exif_custom/map/' . $mid;
}

/**
 * Get a list of cusotm maps.
 *
 * @return object|bool
 *   Either the list of mappings, or FALSE if none available.
 */
function _exif_custom_get_maps() {
  $results = db_query("SELECT mid, name FROM {exif_custom_maps};");
  if ($results->rowCount() > 0) {
    return $results;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_entity_presave().
 */
function exif_custom_entity_presave($file) {
  $config = variable_get('exif_custom_checks', array());
  if (!empty($config['auto-import'])) {
    $file = exif_custom_process_entity($file);
  }
  return $file;
}

/**
 * Implements hook_process_entity().
 */
function exif_custom_process_entity(&$file) {
  if (!isset($file->type) || !isset($file->uri)) {
    return;
  }
  if ($file->type != 'image') {
    return;
  }
  if (arg(3) == 'exif_custom') {
    return;
  }
  if (arg(2) == 'edit') {
    return;
  }

  // Media Browser saves in two steps: first a temporary file is saved after
  // which the user is presented with a form an can edit fields on the file.
  // After potentially updating the file fields the user presses save and the
  // file is made permanent and saved. As exif_custom_process_entity is invoked
  // in both situations we need to detect the last save and avoid mapping as it
  // would overwrite any changes the user made.
  if (arg(0) == 'media' && arg(1) == 'browser' && $file->status == FILE_STATUS_PERMANENT) {
    return;
  }

  // Skip mapping if the file has a path that is excluded.
  $patterns = variable_get('exif_custom_exclude_paths', NULL);
  if (!empty($patterns) && drupal_match_path($file->uri, $patterns)) {
    return;
  }

  $mappings = exif_custom_get_mapping();
  $data = exif_custom_get_exif_fields($file->uri, TRUE);
  if (empty($data)) {
    return;
  }

  $lang = entity_language('file', $file);
  if (!$lang) {
    $lang = LANGUAGE_NONE;
  }

  foreach ($mappings as $field => $values) {
    // Ignore fields that aren't present.
    if (!isset($data[$values->exif_field])) {
      continue;
    }
    // File name is special case.
    if ($field == 'filename') {
      $file->filename = $data[$values->exif_field];
      continue;
    }
    $array = array();
    $field_info = field_info_field($field);
    $instance_info = field_info_instance('file', $field, 'image');
    switch ($field_info['type']) {
      case 'taxonomy_term_reference':
        $vids = array();
        foreach ($field_info['settings']['allowed_values'] as $allowed_value) {
          $vocabulary = taxonomy_vocabulary_machine_name_load($allowed_value['vocabulary']);
          if ($allowed_value['vocabulary'] === 0) {
            break;
          }
          $vids[$vocabulary->vid] = $vocabulary;
        }
        $element = array();
        $element['#value'] = isset($data[$values->exif_field]) ? $data[$values->exif_field] : FALSE;
        $form_state = array();
        $array = array();
        $array[$lang] = _exif_custom_taxonomy_autocomplete_validate($element, $vids);
        break;

      case 'country':
        $countries = array_flip(countries_get_countries('name'));
        if (isset($countries[$data[$values->exif_field]])) {
          $array[$lang][0]['iso2'] = ($countries[$data[$values->exif_field]]);
        }
        break;

      case 'creative_commons':
        module_load_include('module', 'creative_commons');
        $licence_by_id = array(
          'CC_NONE' => 1,
          'CC_BY' => 2,
          'CC_BY_SA' => 3,
          'CC_BY_ND' => 4,
          'CC_BY_NC' => 5,
          'CC_BY_NC_SA' => 6,
          'CC_BY_NC_ND' => 7,
          'CC_0' => 8,
          'CC_PD' => 9,
        );

        $licence_by_id = array_merge($licence_by_id, array_flip(creative_commons_get_licence_types()));
        if (isset($licence_by_id[$data[$values->exif_field]])) {

          $array[$lang]['0']['licence'] = $licence_by_id[$data[$values->exif_field]];
        }
        break;

      case 'date':
        $array[$lang]['0']['value'] = strtotime($data[$values->exif_field]);
        break;

      default:
        $array[$lang]['0']['value'] = $data[$values->exif_field];
    }

    $file->$field = $array;
  }
}

/**
 * Load a mapping for the current user, or the default if not set.
 *
 * @return array
 *   The appropriate mapping for this user.
 */
function exif_custom_get_mapping() {
  // First try and get users default.
  $mid = exif_custom_get_user_default();
  // Use site default or item 0.
  if (empty($mid)) {
    $mid = variable_get('exif_custom_default', 0);
  }
  $return = db_query("SELECT * FROM {exif_custom_mapped_fields}
    WHERE mid = :mid AND img_field != 'none'", array(
      ':mid' => $mid,
    ))->fetchAllAssoc('img_field');
  return $return;
}

/**
 *
 *
 * @param string $uri
 *   A file URL.
 * @param bool $concatenate_arrays
 *   Whether or not to concatenate values or overwrite them.
 *
 * @return array
 *   The fields extracted.
 */
function exif_custom_get_exif_fields($uri, $concatenate_arrays = TRUE) {
  // Generate the absolute URL for the image just once.
  if (variable_get('exif_custom_request_method', 'legacy') == 'legacy') {
    $image_url = drupal_realpath($uri);
  }
  else {
    $image_url = file_create_url($uri);
  }

  $fields = array();

  // EXIF. Because there can be corrupt / incompatible data in the image, and
  // it doesn't support stream options, throw away any error messages.
  $exif = @exif_read_data($image_url, NULL, TRUE);
  if (isset($exif) && is_array($exif)) {
    foreach ($exif as $name => $section) {
      foreach ($section as $key => $value) {
        if ($concatenate_arrays && is_array($value)) {
          $value = implode(', ', $value);
        }
        $fields['EXIF:' . $name . ':' . $key] = exif_custom_check_plain($value);
      }
    }
  }

  // XMP.
  $fields = array_merge($fields, exif_custom_get_xmp($image_url));

  // IPTC. This function doesn't support stream options so ignore any errors.
  $size = @getimagesize($image_url, $info);
  if (isset($info) && is_array($info)) {
    foreach ($info as $block) {
      $iptc = iptcparse($block);

      if (!empty($iptc)) {
        // IPTC:2#254 can contain name=value pairs.
        if (isset($iptc['2#254']) && is_array($iptc['2#254'])) {
          $i = 0;
          foreach ($iptc['2#254'] as $iptc_field) {
            $subfields = explode('=', $iptc_field);
            $iptc['2#254.' . $subfields[0]] = $subfields[1];
          }
          unset($iptc['2#254']);
        }
        foreach ($iptc as $key => $value) {
          if ($concatenate_arrays && is_array($value)) {
            $value = implode(', ', $value);
          }
          $fields['IPTC:' . $key] = exif_custom_check_plain($value);
        }
      }
    }
  }

  return $fields;
}

/**
 *
 */
function _exif_custom_taxonomy_autocomplete_validate(&$element, $vocabularies) {
  // Autocomplete widgets do not send their tids in the form, so we must detect
  // them here and process them independently.
  $items = array();
  if ($tags = $element['#value']) {
    // Translate term names into actual terms.
    if (is_array($tags)) {
      // If #value is an array, it was probably a bag in the XMP, thus no need
      // to run through drupal_explode_tags().
      $typed_terms = $tags;
    }
    else {
      $typed_terms = drupal_explode_tags($tags);
    }
    foreach ($typed_terms as $typed_term) {
      // See if the term exists in the chosen vocabulary and return the tid;
      // otherwise, create a new 'autocreate' term for insert/update.
      if ($possibilities = taxonomy_term_load_multiple(array(), array(
        'name' => trim($typed_term),
        'vid' => array_keys($vocabularies),
      ))) {
        $term = array_pop($possibilities);
      }
      else {
        $vocabulary = reset($vocabularies);
        $term = array(
          'tid' => 'autocreate',
          'vid' => $vocabulary->vid,
          'name' => $typed_term,
          'vocabulary_machine_name' => $vocabulary->machine_name,
        );
      }
      $items[] = (array) $term;
    }
  }
  foreach ($items as $delta => $item) {
    if ($item['tid'] == 'autocreate') {
      $term = (object) $item;
      unset($term->tid);
      taxonomy_term_save($term);
      $items[$delta]['tid'] = $term->tid;
    }
  }
  return $items;
}

/**
 *
 */
function exif_custom_check_plain($text) {
  if (is_null($text)) {
    $text = "";
  }
  if (!mb_detect_encoding($text, 'UTF-8', TRUE)) {
    $text = html_entity_decode($text);
    $text = mb_convert_encoding($text, 'UTF-8', 'ISO-8859-1');
    $text = str_replace('>', '&gt;', $text);
    $text = str_replace('<', '&lt;', $text);
    $text = str_replace('&lt;br /&gt;', '\n', $text);
  }

  return $text;
  // Removed as it stops italics in descriptions.
  // return htmlspecialchars($text, ENT_QUOTES, 'UTF-8');
}

/**
 *
 */
function exif_custom_get_xmp($image) {
  $content = file_get_contents($image);
  $xmp_data_start = strpos($content, '<x:xmpmeta');
  $xmp_data_end = strpos($content, '</x:xmpmeta>');
  if ($xmp_data_start === FALSE || $xmp_data_end === FALSE) {
    return array();
  }
  $xmp_length = $xmp_data_end - $xmp_data_start;
  $xmp_data = substr($content, $xmp_data_start, $xmp_length + 12);
  unset($content);
  $xmp = simplexml_load_string($xmp_data);
  if ($xmp === FALSE) {
    return array();
  }
  // $namespaces = $xmp->getDocNamespaces(true);
  // $fields = array();
  // foreach ($namespaces as $namespace) {
  // $fields[] = exif_custom_xml_recursion($xmp->children($namespace));
  $field_data = array();
  exif_custom_xml_recursion($xmp, $field_data, 'XMP');

  return $field_data;
}

/**
 *
 *
 * @param object $obj
 * @param array $fields
 * @param string name
 *
 * @return array
 */
function exif_custom_xml_recursion($obj, array &$fields, $name) {
  $namespace = $obj->getDocNamespaces(TRUE);
  $namespace[NULL] = NULL;

  $children = array();
  $attributes = array();

  $text = trim((string) $obj);
  if (strlen($text) === 0) {
    $text = NULL;
  }

  if (strtolower((string) $obj->getName()) == "bag") {
    // @todo Add support for bags of objects other than just text?
    $childValues = array();
    $objChildren = $obj->children("rdf", TRUE);
    foreach ($objChildren as $child) {
      $childValues[] = trim((string) $child);
    }
    if (count($childValues) > 0) {
      $fields[$name] = $childValues;
    }
  }
  else {
    $name = $name . ':' . strtolower((string) $obj->getName());

    // Get info for all namespaces.
    if (is_object($obj)) {
      foreach ($namespace as $ns => $nsUrl) {
        // Attributes.
        $objAttributes = $obj->attributes($ns, TRUE);
        foreach ($objAttributes as $attributeName => $attributeValue) {
          $attribName = strtolower(trim((string) $attributeName));
          $attribVal = trim((string) $attributeValue);
          if (!empty($ns)) {
            $attribName = $ns . ':' . $attribName;
          }
          $attributes[$attribName] = $attribVal;
        }

        // Children.
        $objChildren = $obj->children($ns, TRUE);
        foreach ($objChildren as $childName => $child) {
          $childName = strtolower((string) $childName);
          if (!empty($ns)) {
            $childName = $ns . ':' . $childName;
          }
          $children[$childName][] = exif_custom_xml_recursion($child, $fields, $name);
        }
      }
    }
    if (!is_null($text)) {
      $fields[$name] = $text;
    }
  }

  return array(
    'name' => $name,
    'text' => html_entity_decode($text),
    'attributes' => $attributes,
    'children' => $children,
  );
}

/**
 * Get the mapping ID from a Mapping name.
 *
 * @param string $name
 *   The name of the mapping.
 *
 * @return int
 *   The ID, or if not found -1.
 */
function exif_custom_get_mid($name) {
  $mid = db_select('exif_custom_maps', 'm')
    ->fields('m', array('mid'))
    ->condition('m.name', $name)
    ->execute()
    ->fetchField();

  if (!empty($mid)) {
    return $mid;
  }
  return -1;
}
